1. map      arr.map( x => x*x )
배열의 원소가 순서 그대로 내려옴
return 값 배열


2. filter   arr.filter(p)
p의 value : true or false
return 값 배열 (조건에 맞는게 없으면 빈 배열 될 수도)
[true, false, false]


3. reduce   arr.reduce((acc, cur) => acc + cur, 초기값)
초기값을 생략하면 맨 앞 값이 초기값이 되지만 웬만하면 초기값 정확하게 작성


4. foldr / foldl
https://blog.majecty.com/posts/2016-06-04-b-foldr-and-foldl.html

foldr :: (a -> b -> b) -> b -> [a] -> b

foldr (+) 0 [1,2,3]
1 + (foldr (+) 0 [2,3])
1 + (2 + (foldr (+) 0 [3]))
1 + (2 + (3 + (foldr (+) 0 [])))
1 + (2 + (3 + (0)))


foldl :: (b -> a -> b) -> b -> [a] -> b

foldl (+) 0 [1,2,3]
foldl (+) (0 + 1) [2,3]
foldl (+) ((0 + 1) + 2) [3]
foldl (+) ((0 + 1) + 2 + 3) []
((0 + 1) + 2 + 3)


5. useReducer
const [state, dispatch] = useReducer(reducer, initialState)
상태변환의 범위가 매우 넓을 때 사용하면 좋음 